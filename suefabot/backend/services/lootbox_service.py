import random
from typing import List, Dict, Optional
from sqlalchemy.orm import Session
from datetime import datetime

from models import User, Item, UserItem, Transaction, TransactionType, ItemRarity, Chest
from services.transaction_service import TransactionService
from data.starter_items import LOOTBOX_CONFIG


class LootboxService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª—É—Ç–±–æ–∫—Å–∞–º–∏"""
    
    @staticmethod
    def give_starter_lootbox(session: Session, user: User) -> bool:
        """
        –í—ã–¥–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ª—É—Ç–±–æ–∫—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            session: –°–µ—Å—Å–∏—è –ë–î
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            
        Returns:
            True –µ—Å–ª–∏ –ª—É—Ç–±–æ–∫—Å –≤—ã–¥–∞–Ω, False –µ—Å–ª–∏ —É–∂–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ª—É—Ç–±–æ–∫—Å
        existing = session.query(UserItem).filter_by(
            user_id=user.id,
            item_id=1  # ID —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ª—É—Ç–±–æ–∫—Å–∞
        ).first()
        
        if existing:
            return False
        
        # –í—ã–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ª—É—Ç–±–æ–∫—Å
        starter_box = session.query(Chest).filter_by(
            name='–°—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫'
        ).first()
        
        if starter_box:
            user_item = UserItem(
                user_id=user.id,
                item_id=starter_box.id,
                quantity=1,
                equipped=False
            )
            session.add(user_item)
            session.commit()
            return True
        
        return False
    
    @staticmethod
    def open_lootbox(
        session: Session, 
        user: User, 
        chest_id: int
    ) -> Dict:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª—É—Ç–±–æ–∫—Å –∏ –≤—ã–¥–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã
        
        Args:
            session: –°–µ—Å—Å–∏—è –ë–î
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            chest_id: ID —Å—É–Ω–¥—É–∫–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–Ω–¥—É–∫
        chest = session.query(Chest).filter_by(id=chest_id).first()
        if not chest:
            raise ValueError("Chest not found")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—É–Ω–¥—É–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_chest = session.query(UserItem).filter_by(
            user_id=user.id,
            item_id=chest_id
        ).first()
        
        if not user_chest or user_chest.quantity <= 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∫—É–ø–∏—Ç—å
            if chest.price_stars > user.stars_balance:
                raise ValueError("Insufficient balance")
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã
            TransactionService.create_transaction(
                session=session,
                user=user,
                transaction_type=TransactionType.CHEST_OPEN,
                amount=-chest.price_stars,
                description=f"–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—É–Ω–¥—É–∫–∞: {chest.name}"
            )
        else:
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É–Ω–¥—É–∫–æ–≤
            user_chest.quantity -= 1
            if user_chest.quantity == 0:
                session.delete(user_chest)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—É–Ω–¥—É–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        chest_type = 'common'
        for key, config in LOOTBOX_CONFIG.items():
            if config['name'] == chest.name:
                chest_type = key
                break
        
        config = LOOTBOX_CONFIG.get(chest_type, LOOTBOX_CONFIG['common'])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        items = LootboxService._generate_rewards(
            session=session,
            chest_config=config,
            items_count=chest.items_count or config['items_count']
        )
        
        # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for item in items:
            user_item = session.query(UserItem).filter_by(
                user_id=user.id,
                item_id=item.id
            ).first()
            
            if user_item:
                user_item.quantity += 1
            else:
                user_item = UserItem(
                    user_id=user.id,
                    item_id=item.id,
                    quantity=1,
                    equipped=False
                )
                session.add(user_item)
        
        session.commit()
        
        return {
            'chest': {
                'id': chest.id,
                'name': chest.name,
                'type': chest_type
            },
            'items': [
                {
                    'id': item.id,
                    'name': item.name,
                    'description': item.description,
                    'rarity': item.rarity.value,
                    'category': item.category,
                    'emoji': item.properties.get('emoji', 'üéÅ') if item.properties else 'üéÅ'
                }
                for item in items
            ]
        }
    
    @staticmethod
    def _generate_rewards(
        session: Session,
        chest_config: Dict,
        items_count: int
    ) -> List[Item]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ –ª—É—Ç–±–æ–∫—Å–∞
        
        Args:
            session: –°–µ—Å—Å–∏—è –ë–î
            chest_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—É–Ω–¥—É–∫–∞
            items_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        """
        rewards = []
        drop_rates = chest_config['drop_rates']
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å
        if 'guaranteed_rarity' in chest_config:
            guaranteed_rarity = ItemRarity[chest_config['guaranteed_rarity'].upper()]
            items = session.query(Item).filter_by(
                rarity=guaranteed_rarity,
                is_active=True
            ).all()
            
            if items:
                rewards.append(random.choice(items))
                items_count -= 1
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        for _ in range(items_count):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –ø–æ drop rates
            rarity = LootboxService._roll_rarity(drop_rates)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —ç—Ç–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
            items = session.query(Item).filter_by(
                rarity=rarity,
                is_active=True
            ).all()
            
            if items:
                rewards.append(random.choice(items))
        
        return rewards
    
    @staticmethod
    def _roll_rarity(drop_rates: Dict[str, float]) -> ItemRarity:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º
        
        Args:
            drop_rates: –°–ª–æ–≤–∞—Ä—å —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
            
        Returns:
            –†–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞
        """
        roll = random.random()
        cumulative = 0
        
        for rarity_str, chance in drop_rates.items():
            cumulative += chance
            if roll <= cumulative:
                return ItemRarity[rarity_str.upper()]
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º common
        return ItemRarity.COMMON