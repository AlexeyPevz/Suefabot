import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

import aiohttp

from config import settings
from keyboards import (
    get_main_menu_keyboard,
    get_game_mode_keyboard,
    get_challenge_keyboard,
    get_match_result_keyboard,
    get_shop_keyboard,
    get_back_button,
    get_inline_game_button
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sentry (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω DSN)
try:
    import sentry_sdk
    if settings.sentry_dsn:
        sentry_sdk.init(dsn=settings.sentry_dsn, traces_sample_rate=0.1, environment=settings.environment)
except Exception:
    pass

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.bot_token)
dp = Dispatcher()


@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Suefabot!</b>\n\n"
        "‚úä‚úåÔ∏è‚úã –†–µ—à–∞–π —Å–ø–æ—Ä—ã –∫—Ä–∞—Å–∏–≤–æ –≤ –∏–≥—Ä–µ ¬´–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞¬ª!\n\n"
        "üéØ <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ PvP-–º–∞—Ç—á–∏ –≤ —á–∞—Ç–∞—Ö\n"
        "‚Ä¢ –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
        "‚Ä¢ –°—Ç–∞–≤–∫–∏ –Ω–∞ Telegram Stars\n"
        "‚Ä¢ –¢—É—Ä–Ω–∏—Ä—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "‚ùì <b>–ü–æ–º–æ—â—å –ø–æ Suefabot</b>\n\n"
        "üì± <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/play - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/shop - –ú–∞–≥–∞–∑–∏–Ω —Å–∫–∏–Ω–æ–≤\n"
        "/rating - –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üéÆ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n"
        "1. –í—ã–∑–æ–≤–∏—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ —á–µ—Ä–µ–∑ @suefabot\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã\n"
        "3. –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞\n"
        "4. –î–æ–∂–¥–∏—Ç–µ—Å—å –≤—ã–±–æ—Ä–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n"
        "5. –£–∑–Ω–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
        "‚≠ê <b>Telegram Stars:</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Stars –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–∫–∏–Ω–æ–≤ –∏ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö!"
    )
    
    await message.answer(help_text, parse_mode="HTML")


@dp.message(Command("play"))
async def cmd_play(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /play"""
    await message.answer(
        "üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:</b>",
        reply_markup=get_game_mode_keyboard(),
        parse_mode="HTML"
    )


@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    # TODO: –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    profile_text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞</b>\n\n"
        f"üÜî ID: <code>{message.from_user.id}</code>\n"
        f"üìõ –ò–º—è: {message.from_user.full_name}\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: 0\n"
        f"‚úÖ –ü–æ–±–µ–¥: 0\n"
        f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: 0\n"
        f"ü§ù –ù–∏—á—å–∏—Ö: 0\n"
        f"üìà –í–∏–Ω—Ä–µ–π—Ç: 0%\n\n"
        f"‚≠ê <b>–ë–∞–ª–∞–Ω—Å Stars:</b> 0\n"
        f"üèÜ <b>–õ–∏–≥–∞:</b> –ë—Ä–æ–Ω–∑–∞\n"
        f"ü•á <b>–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:</b> -"
    )
    
    await message.answer(
        profile_text,
        reply_markup=get_back_button(),
        parse_mode="HTML"
    )


@dp.message(Command("shop"))
async def cmd_shop(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shop"""
    await message.answer(
        "üõç <b>–ú–∞–≥–∞–∑–∏–Ω Suefabot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=get_shop_keyboard(),
        parse_mode="HTML"
    )


@dp.message(Command("rating"))
async def cmd_rating(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rating"""
    # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –ë–î
    rating_text = (
        "üèÜ <b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤</b>\n\n"
        "ü•á 1. Player1 - 1000 –ø–æ–±–µ–¥\n"
        "ü•à 2. Player2 - 950 –ø–æ–±–µ–¥\n"
        "ü•â 3. Player3 - 900 –ø–æ–±–µ–¥\n"
        "4. Player4 - 850 –ø–æ–±–µ–¥\n"
        "5. Player5 - 800 –ø–æ–±–µ–¥\n"
        "6. Player6 - 750 –ø–æ–±–µ–¥\n"
        "7. Player7 - 700 –ø–æ–±–µ–¥\n"
        "8. Player8 - 650 –ø–æ–±–µ–¥\n"
        "9. Player9 - 600 –ø–æ–±–µ–¥\n"
        "10. Player10 - 550 –ø–æ–±–µ–¥\n\n"
        "üìä –í–∞—à–µ –º–µ—Å—Ç–æ: -"
    )
    
    await message.answer(
        rating_text,
        reply_markup=get_back_button(),
        parse_mode="HTML"
    )


@dp.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = (
        "üéÆ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Suefabot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        welcome_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@dp.callback_query(F.data == "profile")
async def callback_profile(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    await cmd_profile(callback.message)
    await callback.answer()


@dp.callback_query(F.data == "shop")
async def callback_shop(callback: types.CallbackQuery):
    """–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω"""
    await callback.message.edit_text(
        "üõç <b>–ú–∞–≥–∞–∑–∏–Ω Suefabot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=get_shop_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@dp.callback_query(F.data == "rating")
async def callback_rating(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥"""
    await cmd_rating(callback.message)
    await callback.answer()


@dp.callback_query(F.data == "stats")
async def callback_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Suefabot</b>\n\n"
        "üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: 0\n"
        "üéÆ –ò–≥—Ä —Å–µ–≥–æ–¥–Ω—è: 0\n"
        "üí∞ –û–±–æ—Ä–æ—Ç Stars: 0\n"
        "üèÜ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: 0"
    )
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=get_back_button(),
        parse_mode="HTML"
    )
    await callback.answer()


@dp.callback_query(F.data == "help")
async def callback_help(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    await cmd_help(callback.message)
    await callback.answer()


@dp.callback_query(F.data == "back")
async def callback_back(callback: types.CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    await callback_main_menu(callback)


@dp.callback_query(F.data.startswith("shop_"))
async def callback_shop_category(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–∞"""
    category = callback.data.split("_")[1]
    
    category_names = {
        "hands": "‚úã –†—É–∫–∏",
        "sleeves": "üëï –†—É–∫–∞–≤–∞",
        "accessories": "üíç –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        "items": "üé® –ü—Ä–µ–¥–º–µ—Ç—ã",
        "arenas": "üèü –ê—Ä–µ–Ω—ã",
        "chests": "üéÅ –°—É–Ω–¥—É–∫–∏"
    }
    
    await callback.message.edit_text(
        f"{category_names.get(category, '–¢–æ–≤–∞—Ä—ã')}\n\n"
        "üöß <i>–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>",
        reply_markup=get_back_button(),
        parse_mode="HTML"
    )
    await callback.answer()


@dp.inline_query()
async def inline_query_handler(query: InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    from api_client import api_client
    
    results = []
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = query.from_user
    telegram_id = str(user.id)
    username = user.username or ""
    full_name = user.full_name or ""
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ –Ω–∞ –∏–≥—Ä—É
    challenge_result = InlineQueryResultArticle(
        id="challenge",
        title="üéÆ –í—ã–∑–≤–∞—Ç—å –Ω–∞ –º–∞—Ç—á",
        description="–ë—Ä–æ—Å—å—Ç–µ –≤—ã–∑–æ–≤ –≤ ¬´–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞¬ª!",
        input_message_content=InputTextMessageContent(
            message_text=(
                f"‚öîÔ∏è <b>{query.from_user.full_name} –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å –Ω–∞ –º–∞—Ç—á!</b>\n\n"
                "–ì–æ—Ç–æ–≤—ã —Ä–µ—à–∏—Ç—å —Å–ø–æ—Ä –≤ —á–µ—Å—Ç–Ω–æ–º –±–æ—é?"
            ),
            parse_mode="HTML"
        ),
        reply_markup=get_challenge_keyboard("creating..."),
        thumb_url="https://via.placeholder.com/100x100.png?text=‚öîÔ∏è"
    )
    results.append(challenge_result)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∏–≥—Ä—É
    invite_result = InlineQueryResultArticle(
        id="invite",
        title="üì¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ Suefabot",
        description="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏",
        input_message_content=InputTextMessageContent(
            message_text=(
                "üéÆ <b>Suefabot - –†–µ—à–∞–π —Å–ø–æ—Ä—ã –∫—Ä–∞—Å–∏–≤–æ!</b>\n\n"
                "‚úä‚úåÔ∏è‚úã –ò–≥—Ä–∞–π –≤ ¬´–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞¬ª –ø—Ä—è–º–æ –≤ Telegram!\n\n"
                "‚Ä¢ –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
                "‚Ä¢ –°—Ç–∞–≤–∫–∏ –Ω–∞ Telegram Stars\n"
                "‚Ä¢ –¢—É—Ä–Ω–∏—Ä—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏\n\n"
                "–ù–∞—á–Ω–∏ –∏–≥—Ä–∞—Ç—å: @suefabot"
            ),
            parse_mode="HTML"
        ),
        reply_markup=get_inline_game_button(),
        thumb_url="https://via.placeholder.com/100x100.png?text=üéÆ"
    )
    results.append(invite_result)
    
    await query.answer(results, cache_time=300)


@dp.callback_query(F.data.startswith("accept_challenge:"))
async def accept_challenge(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞"""
    from api_client import api_client
    
    match_id = callback.data.split(":")[1]
    
    # –ï—Å–ª–∏ match_id —ç—Ç–æ "creating...", —Å–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –º–∞—Ç—á
    if match_id == "creating...":
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        promise = ""
        stake_amount = 0
        
        message_text = callback.message.text
        if "–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π:" in message_text:
            promise_line = [line for line in message_text.split('\n') if "–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π:" in line]
            if promise_line:
                promise = promise_line[0].split("–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π:")[1].strip()
        
        if "–°—Ç–∞–≤–∫–∞:" in message_text:
            stake_line = [line for line in message_text.split('\n') if "–°—Ç–∞–≤–∫–∞:" in line]
            if stake_line:
                try:
                    stake_amount = int(stake_line[0].split()[1])
                except:
                    stake_amount = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è –º–∞—Ç—á–∞
        creator = callback.from_user
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á —á–µ—Ä–µ–∑ API
        match_data = await api_client.create_match(
            telegram_id=str(creator.id),
            username=creator.username or "",
            full_name=creator.full_name or "",
            promise=promise,
            stake_amount=stake_amount
        )
        
        if match_data:
            match_id = match_data['match_id']
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º ID –º–∞—Ç—á–∞
            await callback.message.edit_reply_markup(
                reply_markup=get_challenge_keyboard(match_id)
            )
        else:
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–∞—Ç—á—É
    await callback.message.edit_text(
        f"üéÆ <b>–ú–∞—Ç—á –Ω–∞—á–∞–ª—Å—è!</b>\n\n"
        f"ID –º–∞—Ç—á–∞: <code>{match_id}</code>\n\n"
        f"üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∏–≥—Ä—É:",
        reply_markup=get_inline_game_button(match_id),
        parse_mode="HTML"
    )
    await callback.answer("–ú–∞—Ç—á –Ω–∞—á–∞–ª—Å—è! –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä –≤ –∏–≥—Ä–µ.")


@dp.callback_query(F.data.startswith("decline_challenge:"))
async def decline_challenge(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–∑–æ–≤–∞"""
    await callback.message.edit_text(
        "‚ùå <b>–í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
        "–ò–≥—Ä–æ–∫ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –º–∞—Ç—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
        parse_mode="HTML"
    )
    await callback.answer()


@dp.callback_query(F.data == "profile")
async def show_profile(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from api_client import api_client
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
    user_data = await api_client.get_user_profile(str(callback.from_user.id))
    
    if user_data:
        win_rate = user_data.get('win_rate', 0)
        profile_text = (
            "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üÜî ID: <code>{callback.from_user.id}</code>\n"
            f"üìù –ò–º—è: {user_data.get('full_name', callback.from_user.full_name)}\n\n"
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {user_data.get('total_games', 0)}\n"
            f"‚úÖ –ü–æ–±–µ–¥: {user_data.get('wins', 0)}\n"
            f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {user_data.get('losses', 0)}\n"
            f"ü§ù –ù–∏—á—å–∏—Ö: {user_data.get('draws', 0)}\n"
            f"üìà –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data.get('stars_balance', 0)} ‚≠êÔ∏è"
        )
    else:
        profile_text = (
            "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üÜî ID: <code>{callback.from_user.id}</code>\n"
            f"üìù –ò–º—è: {callback.from_user.full_name}\n\n"
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    await callback.message.answer(
        profile_text,
        reply_markup=get_back_button(),
        parse_mode="HTML"
    )
    await callback.answer()


async def on_startup(bot: Bot) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot is starting...")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –≤ production
    if settings.environment == "production" and settings.webhook_host:
        webhook_url = f"{settings.webhook_host}{settings.webhook_path}"
        await bot.set_webhook(webhook_url)
        logger.info(f"Webhook set to {webhook_url}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    bot_info = await bot.get_me()
    logger.info(f"Bot @{bot_info.username} started!")


async def on_shutdown(bot: Bot) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot is shutting down...")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ webhook
    if settings.environment == "production":
        await bot.delete_webhook()
    
    await bot.session.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if settings.environment == "production" and settings.webhook_host:
        # Webhook mode –¥–ª—è production
        app = web.Application()
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        webhook_requests_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot,
        )
        webhook_requests_handler.register(app, path=settings.webhook_path)
        setup_application(app, dp, bot=bot)
        
        web.run_app(app, host="0.0.0.0", port=settings.webhook_port)
    else:
        # Polling mode –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        asyncio.run(start_polling())


async def start_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
    await bot.delete_webhook()
    await dp.start_polling(bot)


if __name__ == "__main__":
    main()