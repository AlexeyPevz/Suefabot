import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { toast } from 'react-hot-toast';
import io from 'socket.io-client';
import { useTelegram } from '../hooks/useTelegram';
import { matchAPI } from '../utils/api';

const SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';

const MatchPage = ({ authToken }) => {
  const { matchId } = useParams();
  const navigate = useNavigate();
  const { user, hapticFeedback, tg } = useTelegram();
  
  const [matchStatus, setMatchStatus] = useState('loading');
  const [selectedChoice, setSelectedChoice] = useState(null);
  const [opponentChoice, setOpponentChoice] = useState(null);
  const [isAnimating, setIsAnimating] = useState(false);
  const [result, setResult] = useState(null);
  const [socket, setSocket] = useState(null);

  useEffect(() => {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–æ–∫–µ—Ç—É —Å auth —Ç–æ–∫–µ–Ω–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const newSocket = io(SOCKET_URL, {
      auth: authToken ? { token: authToken } : {},
      extraHeaders: tg?.initData ? { 'X-Telegram-Init-Data': tg.initData } : undefined,
    });
    setSocket(newSocket);

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –º–∞—Ç—á–∞
    newSocket.emit('join_match', { match_id: matchId });

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    newSocket.on('match_started', (data) => {
      setMatchStatus('in_progress');
      toast.success(`${data.player2_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!`);
      hapticFeedback('notification', 'success');
    });

    newSocket.on('choice_made', (data) => {
      toast(`${data.player_name} —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä!`, { icon: '‚úÖ' });
    });

    newSocket.on('match_completed', (data) => {
      handleMatchComplete(data);
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞
    loadMatchStatus();

    return () => {
      newSocket.emit('leave_match', { match_id: matchId });
      newSocket.close();
    };
  }, [matchId, authToken]);

  const loadMatchStatus = async () => {
    try {
      const status = await matchAPI.getStatus(matchId);
      setMatchStatus(status.status);
      
      // –ï—Å–ª–∏ –º–∞—Ç—á –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
      if (status.status === 'waiting' && user) {
        const isCreator = status.player1_telegram_id === user.id.toString();
        if (!isCreator) {
          await matchAPI.join(matchId, user);
          setMatchStatus('in_progress');
        }
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—á–∞');
      navigate('/');
    }
  };

  const makeChoice = async (choice) => {
    if (!user || selectedChoice || matchStatus !== 'in_progress') return;

    setSelectedChoice(choice);
    hapticFeedback('impact', 'medium');

    try {
      const response = await matchAPI.makeChoice(matchId, user.id, choice);
      
      if (response.status === 'completed') {
        handleMatchComplete(response);
      } else {
        toast('–ñ–¥–µ–º –≤—ã–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...', { icon: '‚è≥' });
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±–æ—Ä–∞');
      setSelectedChoice(null);
    }
  };

  const handleMatchComplete = (data) => {
    setIsAnimating(true);
    setOpponentChoice(data.player1_choice === selectedChoice ? data.player2_choice : data.player1_choice);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    setTimeout(() => {
      setResult(data);
      hapticFeedback('notification', data.winner_id ? 'success' : 'warning');
      
      if (data.result_type === 'win') {
        const isWinner = data.winner_id === user?.id;
        toast(isWinner ? 'üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!' : 'üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏', {
          duration: 4000,
        });
      } else {
        toast('ü§ù –ù–∏—á—å—è!', { duration: 4000 });
      }
    }, 2000);
  };

  const renderChoice = (choice, isOpponent = false) => {
    const icons = {
      rock: '‚úä',
      scissors: '‚úåÔ∏è',
      paper: '‚úã',
    };

    return (
      <motion.div
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
        className={`text-8xl ${isOpponent ? 'transform scale-x-[-1]' : ''}`}
      >
        {choice ? icons[choice] : '‚ùì'}
      </motion.div>
    );
  };

  const renderGameScreen = () => {
    if (isAnimating) {
      // –≠–∫—Ä–∞–Ω –∞–Ω–∏–º–∞—Ü–∏–∏ –±–æ—è
      return (
        <div className="flex-1 flex items-center justify-center">
          <div className="flex gap-8 items-center">
            <motion.div
              animate={{ y: [0, -20, 0] }}
              transition={{ repeat: 3, duration: 0.5 }}
              className="animate-hand-shake"
            >
              {renderChoice(selectedChoice)}
            </motion.div>
            
            <span className="text-4xl">VS</span>
            
            <motion.div
              animate={{ y: [0, -20, 0] }}
              transition={{ repeat: 3, duration: 0.5 }}
              className="animate-hand-shake"
            >
              {renderChoice(opponentChoice, true)}
            </motion.div>
          </div>
        </div>
      );
    }

    if (result) {
      // –≠–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      return (
        <div className="flex-1 flex flex-col items-center justify-center p-4">
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            className="text-center"
          >
            <div className="flex gap-8 items-center justify-center mb-8">
              <div className={result.winner_id === user?.id ? 'animate-glow' : 'opacity-50'}>
                {renderChoice(selectedChoice)}
              </div>
              
              <span className="text-2xl">VS</span>
              
              <div className={result.winner_id && result.winner_id !== user?.id ? 'animate-glow' : 'opacity-50'}>
                {renderChoice(opponentChoice, true)}
              </div>
            </div>
            
            <h2 className="text-3xl font-bold mb-4">
              {result.result_type === 'draw' ? 'ü§ù –ù–∏—á—å—è!' : 
               result.winner_id === user?.id ? 'üéâ –ü–æ–±–µ–¥–∞!' : 'üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}
            </h2>
            
            {result.promise && result.winner_id && (
              <p className="text-telegram-hint mb-6">
                {result.winner_id === user?.id 
                  ? `–°–æ–ø–µ—Ä–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω: ${result.promise}`
                  : `–í—ã –¥–æ–ª–∂–Ω—ã: ${result.promise}`}
              </p>
            )}
            
            <div className="flex gap-4">
              <button
                onClick={() => navigate('/')}
                className="btn-secondary"
              >
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </button>
              <button
                onClick={() => navigate('/play')}
                className="btn-primary"
              >
                –ù–æ–≤–∞—è –∏–≥—Ä–∞
              </button>
            </div>
          </motion.div>
        </div>
      );
    }

    // –≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞
    return (
      <div className="flex-1 flex flex-col p-4">
        <div className="text-center mb-8">
          <h2 className="text-2xl font-bold mb-2">–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä</h2>
          <p className="text-telegram-hint">–£ –≤–∞—Å –µ—Å—Ç—å 10 —Å–µ–∫—É–Ω–¥</p>
        </div>
        
        <div className="flex-1 flex items-center justify-center">
          <div className="grid grid-cols-3 gap-4">
            {['rock', 'scissors', 'paper'].map((choice) => (
              <motion.button
                key={choice}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => makeChoice(choice)}
                disabled={selectedChoice !== null}
                className={`choice-button ${selectedChoice === choice ? 'selected' : ''}`}
              >
                {choice === 'rock' && '‚úä'}
                {choice === 'scissors' && '‚úåÔ∏è'}
                {choice === 'paper' && '‚úã'}
              </motion.button>
            ))}
          </div>
        </div>
        
        {selectedChoice && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center mt-8"
          >
            <p className="text-telegram-hint">
              –í–∞—à –≤—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω. –ñ–¥–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...
            </p>
          </motion.div>
        )}
      </div>
    );
  };

  if (matchStatus === 'loading') {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="text-6xl mb-4">‚è≥</div>
          <p className="text-telegram-hint">–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—á–∞...</p>
        </div>
      </div>
    );
  }

  if (matchStatus === 'waiting') {
    return (
      <div className="flex items-center justify-center min-h-screen p-4">
        <div className="text-center">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ repeat: Infinity, duration: 2, ease: 'linear' }}
            className="text-6xl mb-4"
          >
            ‚è≥
          </motion.div>
          <h2 className="text-2xl font-bold mb-2">–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞</h2>
          <p className="text-telegram-hint mb-6">
            –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –º–∞—Ç—á —Å –¥—Ä—É–≥–æ–º
          </p>
          <button
            onClick={() => {
              hapticFeedback('impact', 'light');
              // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è —à–µ—Ä–∏–Ω–≥–∞
              toast.success('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
            }}
            className="btn-primary"
          >
            –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–∞—Ç—á–µ–º
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col min-h-screen">
      {renderGameScreen()}
    </div>
  );
};

export default MatchPage;